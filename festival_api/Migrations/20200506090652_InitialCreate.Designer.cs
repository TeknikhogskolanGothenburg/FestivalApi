// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using festival_api.DB_Context;

namespace festival_api.Migrations
{
    [DbContext(typeof(FestivalDbContext))]
    [Migration("20200506090652_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("festival_api.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtistEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            ArtistId = 1,
                            ArtistEmail = "c64@gmail.com",
                            ArtistName = "C64's",
                            ArtistPhone = "111-222-3333"
                        },
                        new
                        {
                            ArtistId = 2,
                            ArtistEmail = "plasma@gmail.com",
                            ArtistName = "Plasma Screen",
                            ArtistPhone = "444-555-6666"
                        });
                });

            modelBuilder.Entity("festival_api.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EventDate = new DateTime(2021, 6, 23, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Big Splash",
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("festival_api.Models.Gig", b =>
                {
                    b.Property<int>("GigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("GigHeadline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GigLengthInMinutes")
                        .HasColumnType("int");

                    b.HasKey("GigId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("EventId");

                    b.ToTable("Gigs");

                    b.HasData(
                        new
                        {
                            GigId = 1,
                            ArtistId = 1,
                            EventId = 1,
                            GigHeadline = "Rumble",
                            GigLengthInMinutes = 60
                        },
                        new
                        {
                            GigId = 2,
                            ArtistId = 2,
                            EventId = 1,
                            GigHeadline = "Boston Tea Party",
                            GigLengthInMinutes = 70
                        });
                });

            modelBuilder.Entity("festival_api.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ServesAlcohol")
                        .HasColumnType("bit");

                    b.Property<string>("VenueCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VenueSeats")
                        .HasColumnType("int");

                    b.Property<string>("VenueState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueZip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            VenueId = 1,
                            ServesAlcohol = true,
                            VenueCity = "Du Bois",
                            VenueCountry = "USA",
                            VenueName = "Rock Hall",
                            VenueSeats = 145,
                            VenueState = "PA",
                            VenueStreet = "123 Main Street",
                            VenueZip = "18702"
                        });
                });

            modelBuilder.Entity("festival_api.Models.Event", b =>
                {
                    b.HasOne("festival_api.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("festival_api.Models.Gig", b =>
                {
                    b.HasOne("festival_api.Models.Artist", "Artist")
                        .WithMany("Gigs")
                        .HasForeignKey("ArtistId");

                    b.HasOne("festival_api.Models.Event", "Event")
                        .WithMany("Gigs")
                        .HasForeignKey("EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
